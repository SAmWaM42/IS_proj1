{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport { useNavigate } from \"react-router-dom\";\nimport './Profile.css';\nfunction Profile({\n  userData\n}) {\n  _s();\n  const {\n    name,\n    email,\n    role,\n    phoneNumber,\n    _id\n  } = userData;\n  const [formValues, setFormValues] = useState({\n    name: name || '',\n    // Use || '' to prevent uncontrolled input warning if initial data is null/undefined\n    email: email || '',\n    role: role || 'buyer',\n    // Provide a default role if none\n    phoneNumber: phoneNumber || '',\n    oldPassword: '',\n    // These should always start empty\n    newPassword: ''\n  });\n  const admin = role === \"admin\";\n  console.log(admin);\n  const url = \"http://localhost:5000/user/update\";\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    console.log(`Input changed: Name=${name}, Value=${value}`);\n    setFormValues(prevValues => ({\n      ...prevValues,\n      [name]: value\n    }));\n  };\n  const update = async e => {\n    let updatedFields = {\n      id: _id\n    };\n    if (formValues.name !== name && formValues.name.trim() !== '') {\n      updatedFields.name = formValues.name;\n    }\n    if (formValues.email !== email && formValues.email.trim() !== '') {\n      updatedFields.email = formValues.email;\n    }\n    if (formValues.role !== role) {\n      // Role might not have a .trim() if it's a select\n      updatedFields.role = formValues.role;\n    }\n    if (formValues.phoneNumber !== phoneNumber && formValues.phoneNumber.trim() !== '') {\n      updatedFields.phoneNumber = formValues.phoneNumber;\n    }\n    if (formValues.oldPassword && formValues.newPassword) {\n      // Basic validation: ensure new password is not empty after trim\n      if (formValues.newPassword.trim() !== '') {\n        updatedFields.oldPassword = formValues.oldPassword;\n        updatedFields.newPassword = formValues.newPassword;\n      } else {\n        alert(\"New password cannot be empty if you're changing it.\");\n        return;\n      }\n    } else if (formValues.oldPassword || formValues.newPassword) {\n      alert(\"Both old and new password fields are required to change your password.\");\n      return;\n    }\n    console.log(\"Client-side: updatedFields object BEFORE stringify:\", updatedFields);\n    console.log(\"Client-side: JSON.stringify(updatedFields):\", JSON.stringify(updatedFields));\n    console.log(\"Client-side: Sending to URL:\");\n    try {\n      const result = await fetch(url, {\n        credentials: \"include\",\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedFields)\n      });\n      if (!result.ok) {\n        console.log(\"not successfully updated\");\n      }\n      alert(\"successfully updated\");\n    } catch (error) {\n      console.error(\"error updating user\", error);\n    }\n  };\n}\n_s(Profile, \"xhklkpmjtXsAZ0IAfgNYKGrAwMk=\");\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","useNavigate","Profile","userData","_s","name","email","role","phoneNumber","_id","formValues","setFormValues","oldPassword","newPassword","admin","console","log","url","handleInputChange","e","value","target","prevValues","update","updatedFields","id","trim","alert","JSON","stringify","result","fetch","credentials","method","headers","body","ok","error","_c","$RefreshReg$"],"sources":["C:/Users/Cshin/OneDrive/Documents/GitHub/IS_proj1/Thrift-app/client/src/Pages/Profile.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport './Profile.css'\r\n\r\n\r\n\r\n\r\nfunction Profile({ userData }) {\r\n    const { name, email, role, phoneNumber, _id } = userData;\r\n    const [formValues, setFormValues] = useState({\r\n        name: name || '', // Use || '' to prevent uncontrolled input warning if initial data is null/undefined\r\n        email: email || '',\r\n        role: role || 'buyer', // Provide a default role if none\r\n        phoneNumber: phoneNumber || '',\r\n        oldPassword: '', // These should always start empty\r\n        newPassword: ''\r\n    });\r\n\r\n    const admin=(role===\"admin\");\r\n    console.log(admin);\r\n    const url = \"http://localhost:5000/user/update\"\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        console.log(`Input changed: Name=${name}, Value=${value}`);\r\n        setFormValues(prevValues => ({\r\n            ...prevValues,\r\n            [name]: value,\r\n        }))\r\n    };\r\n\r\n\r\n    const update = async (e) => {\r\n        let  updatedFields=\r\n        {     id: _id,\r\n        }\r\n        if (formValues.name !== name && formValues.name.trim() !== '') {\r\n            updatedFields.name = formValues.name;\r\n        }\r\n        if (formValues.email !== email && formValues.email.trim() !== '') {\r\n            updatedFields.email = formValues.email;\r\n        }\r\n        if (formValues.role !== role) { // Role might not have a .trim() if it's a select\r\n            updatedFields.role = formValues.role;\r\n        }\r\n        if (formValues.phoneNumber !== phoneNumber && formValues.phoneNumber.trim() !== '') {\r\n            updatedFields.phoneNumber = formValues.phoneNumber;\r\n        }\r\n          if (formValues.oldPassword && formValues.newPassword) {\r\n            // Basic validation: ensure new password is not empty after trim\r\n            if (formValues.newPassword.trim() !== '') {\r\n                updatedFields.oldPassword = formValues.oldPassword;\r\n                updatedFields.newPassword = formValues.newPassword;\r\n            } else {\r\n                alert(\"New password cannot be empty if you're changing it.\");\r\n                return; \r\n            }\r\n        } else if (formValues.oldPassword || formValues.newPassword) {\r\n         \r\n            alert(\"Both old and new password fields are required to change your password.\");\r\n            return;\r\n        }\r\n\r\n    console.log(\"Client-side: updatedFields object BEFORE stringify:\", updatedFields);\r\n    console.log(\"Client-side: JSON.stringify(updatedFields):\", JSON.stringify(updatedFields));\r\n    console.log(\"Client-side: Sending to URL:\");\r\n\r\n        try {\r\n          \r\n            const result = await fetch(url, {\r\n                credentials: \"include\",\r\n                method: 'POST',\r\n                headers:{\r\n                     'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(updatedFields)\r\n            })\r\n            if (!result.ok) {\r\n                console.log(\"not successfully updated\");\r\n            }\r\n\r\n\r\n            alert(\"successfully updated\");\r\n\r\n        }\r\n        catch (error) {\r\n            console.error(\"error updating user\", error);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\nexport default Profile;\r\n\r\n"],"mappings":";AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AACzE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,eAAe;AAKtB,SAASC,OAAOA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC3B,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC,IAAI;IAAEC,WAAW;IAAEC;EAAI,CAAC,GAAGN,QAAQ;EACxD,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC;IACzCU,IAAI,EAAEA,IAAI,IAAI,EAAE;IAAE;IAClBC,KAAK,EAAEA,KAAK,IAAI,EAAE;IAClBC,IAAI,EAAEA,IAAI,IAAI,OAAO;IAAE;IACvBC,WAAW,EAAEA,WAAW,IAAI,EAAE;IAC9BI,WAAW,EAAE,EAAE;IAAE;IACjBC,WAAW,EAAE;EACjB,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAEP,IAAI,KAAG,OAAQ;EAC5BQ,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,MAAMG,GAAG,GAAG,mCAAmC;EAC/C,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC7B,MAAM;MAAEd,IAAI;MAAEe;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChCN,OAAO,CAACC,GAAG,CAAC,uBAAuBX,IAAI,WAAWe,KAAK,EAAE,CAAC;IAC1DT,aAAa,CAACW,UAAU,KAAK;MACzB,GAAGA,UAAU;MACb,CAACjB,IAAI,GAAGe;IACZ,CAAC,CAAC,CAAC;EACP,CAAC;EAGD,MAAMG,MAAM,GAAG,MAAOJ,CAAC,IAAK;IACxB,IAAKK,aAAa,GAClB;MAAMC,EAAE,EAAEhB;IACV,CAAC;IACD,IAAIC,UAAU,CAACL,IAAI,KAAKA,IAAI,IAAIK,UAAU,CAACL,IAAI,CAACqB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC3DF,aAAa,CAACnB,IAAI,GAAGK,UAAU,CAACL,IAAI;IACxC;IACA,IAAIK,UAAU,CAACJ,KAAK,KAAKA,KAAK,IAAII,UAAU,CAACJ,KAAK,CAACoB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC9DF,aAAa,CAAClB,KAAK,GAAGI,UAAU,CAACJ,KAAK;IAC1C;IACA,IAAII,UAAU,CAACH,IAAI,KAAKA,IAAI,EAAE;MAAE;MAC5BiB,aAAa,CAACjB,IAAI,GAAGG,UAAU,CAACH,IAAI;IACxC;IACA,IAAIG,UAAU,CAACF,WAAW,KAAKA,WAAW,IAAIE,UAAU,CAACF,WAAW,CAACkB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAChFF,aAAa,CAAChB,WAAW,GAAGE,UAAU,CAACF,WAAW;IACtD;IACE,IAAIE,UAAU,CAACE,WAAW,IAAIF,UAAU,CAACG,WAAW,EAAE;MACpD;MACA,IAAIH,UAAU,CAACG,WAAW,CAACa,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACtCF,aAAa,CAACZ,WAAW,GAAGF,UAAU,CAACE,WAAW;QAClDY,aAAa,CAACX,WAAW,GAAGH,UAAU,CAACG,WAAW;MACtD,CAAC,MAAM;QACHc,KAAK,CAAC,qDAAqD,CAAC;QAC5D;MACJ;IACJ,CAAC,MAAM,IAAIjB,UAAU,CAACE,WAAW,IAAIF,UAAU,CAACG,WAAW,EAAE;MAEzDc,KAAK,CAAC,wEAAwE,CAAC;MAC/E;IACJ;IAEJZ,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEQ,aAAa,CAAC;IACjFT,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEY,IAAI,CAACC,SAAS,CAACL,aAAa,CAAC,CAAC;IACzFT,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAEvC,IAAI;MAEA,MAAMc,MAAM,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAE;QAC5Be,WAAW,EAAE,SAAS;QACtBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAC;UACH,cAAc,EAAE;QACrB,CAAC;QACDC,IAAI,EAAEP,IAAI,CAACC,SAAS,CAACL,aAAa;MACtC,CAAC,CAAC;MACF,IAAI,CAACM,MAAM,CAACM,EAAE,EAAE;QACZrB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAC3C;MAGAW,KAAK,CAAC,sBAAsB,CAAC;IAEjC,CAAC,CACD,OAAOU,KAAK,EAAE;MACVtB,OAAO,CAACsB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAE/C;EAEJ,CAAC;AAML;AAACjC,EAAA,CAxFQF,OAAO;AAAAoC,EAAA,GAAPpC,OAAO;AA0FhB,eAAeA,OAAO;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}