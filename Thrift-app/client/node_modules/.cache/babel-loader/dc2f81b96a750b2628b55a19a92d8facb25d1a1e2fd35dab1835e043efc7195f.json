{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\IS_PROJ1\\\\IS_proj1\\\\Thrift-app\\\\client\\\\src\\\\Components\\\\chatbox.js\",\n  _s = $RefreshSig$();\nimport './chatbox.css';\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { GlobalContext } from './ContextWrapper.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Message({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.timestamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n_c = Message;\nfunction Chatbox({\n  message,\n  reload\n}) {\n  _s();\n  const [input, setInput] = useState('');\n  const contextData = useContext(GlobalContext);\n  const {\n    myData,\n    loggedIn,\n    handleUpdate\n  } = contextData || {};\n  const navigate = useNavigate();\n  const {\n    chatId\n  } = useParams(); // Assuming the URL contains a parameter for the chat ID or user ID\n\n  console.log(message);\n  const hasMessages = message.length > 0;\n  const handleSend = async event => {\n    event.preventDefault();\n    if (input.trim()) {\n      // Here you would typically send the message to the server\n      console.log('Sending message:', input);\n      try {\n        const url = `http://localhost:5000/user/chats/${chatId}`;\n        const response = await fetch(url, {\n          credentials: 'include',\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            text: input\n          })\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || \"Message not sent successfully.\");\n        }\n        console.log('Message sent successfully!');\n        setInput('');\n        if (reload) {\n          console.log(\"reloading\");\n          reload();\n        }\n      } catch (err) {\n        console.error(\"Error sending message:\", err);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    children: [hasMessages ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: message.map(msg => /*#__PURE__*/_jsxDEV(Message, {\n        data: msg\n      }, msg._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"New Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatbox, \"lA1WRmtF21wdcPpS5BRzLbXoz7A=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c2 = Chatbox;\nexport default Chatbox;\nvar _c, _c2;\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"Chatbox\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","GlobalContext","jsxDEV","_jsxDEV","Message","data","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","timestamp","_c","Chatbox","message","reload","_s","input","setInput","contextData","useContext","myData","loggedIn","handleUpdate","navigate","chatId","console","log","hasMessages","length","handleSend","event","preventDefault","trim","url","response","fetch","credentials","method","headers","body","JSON","stringify","ok","errorData","json","Error","err","error","map","msg","_id","type","value","onChange","e","target","placeholder","onClick","_c2","$RefreshReg$"],"sources":["C:/xampp/htdocs/IS_PROJ1/IS_proj1/Thrift-app/client/src/Components/chatbox.js"],"sourcesContent":["\r\nimport './chatbox.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport { GlobalContext } from './ContextWrapper.js';\r\n\r\nfunction Message({ data }) {\r\n    return (\r\n        <div className=\"message\">\r\n            <p>{data.text}</p>\r\n            <p>{data.timestamp}</p>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Chatbox({ message,reload }) {\r\n    const [input, setInput] = useState('');\r\n     const contextData = useContext(GlobalContext);\r\n  const { myData, loggedIn, handleUpdate } = contextData || {};\r\n    const navigate = useNavigate();\r\n    const { chatId } = useParams(); // Assuming the URL contains a parameter for the chat ID or user ID\r\n   \r\n    console.log(message);\r\n    const hasMessages = message.length > 0;\r\n \r\n    const handleSend = async (event) => {\r\n          event.preventDefault();\r\n        if (input.trim()) {\r\n            // Here you would typically send the message to the server\r\n            console.log('Sending message:', input);\r\n            try {\r\n                const url = `http://localhost:5000/user/chats/${chatId}`;\r\n                const response = await fetch(url, {\r\n                    credentials: 'include',\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ text: input }),\r\n\r\n                });\r\n                if (!response.ok) {\r\n\r\n                    const errorData = await response.json();\r\n                    throw new Error(errorData.message || \"Message not sent successfully.\");\r\n                }\r\n                console.log('Message sent successfully!');\r\n                setInput('');\r\n                if (reload) {\r\n                    console.log(\"reloading\");\r\n                    reload();\r\n                }\r\n            } catch (err) {\r\n            console.error(\"Error sending message:\", err);\r\n\r\n\r\n            }\r\n\r\n\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"chatbox\">\r\n            {hasMessages?\r\n                (\r\n                   <div className=\"messages\">\r\n\r\n                        {\r\n                            message.map((msg) => (\r\n                                \r\n                                <Message key={msg._id} data={msg} />\r\n                            ))\r\n\r\n                        }\r\n\r\n                    </div>\r\n                ) : ( <div>\r\n                        <h1>New Chat</h1>\r\n                    </div>\r\n                    \r\n                )\r\n            }\r\n            <div className=\"input-area\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder=\"Type a message...\"\r\n                />\r\n                <button onClick={handleSend}>Send</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Chatbox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}