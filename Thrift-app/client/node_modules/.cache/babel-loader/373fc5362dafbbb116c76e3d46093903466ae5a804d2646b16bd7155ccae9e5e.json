{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\IS_PROJ1\\\\IS_proj1\\\\Thrift-app\\\\client\\\\src\\\\components\\\\Form\\\\Form.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Form.css';\nimport Button from '../Button/Button.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Form({\n  fields,\n  onSubmit\n}) {\n  _s();\n  const [formData, setFormdata] = useState({});\n  //dont think i need the backend request here, but i will leave it in for now\n  useEffect(() => {\n    fetch('http://localhost:5000/home').then(response => response.json()).then(data => setMessage(data.message));\n  }, []);\n  let content = null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [fields.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: field.id,\n          children: field.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 29\n        }, this), field.type === 'select' ? content = /*#__PURE__*/_jsxDEV(\"select\", {\n          children: field.value.map(values => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: values.value,\n            children: values.value\n          }, value.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 45\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 45\n        }, this)\n\n        //add any other field types here\n        : content = /*#__PURE__*/_jsxDEV(\"input\", {\n          type: field.type,\n          id: field.name,\n          name: field.name,\n          value: formData[field.name] || '',\n          onChange: e => setFormdata({\n            ...formData,\n            [field.name]: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 38\n        }, this), content]\n      }, field.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          design: \"submit-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Form, \"Fp2mQMQOamQTar7Cpq5RhEl0YrA=\");\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useEffect","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Form","fields","onSubmit","_s","formData","setFormdata","fetch","then","response","json","data","setMessage","message","content","children","map","field","for","id","name","fileName","_jsxFileName","lineNumber","columnNumber","type","value","values","onChange","e","target","className","design","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/IS_PROJ1/IS_proj1/Thrift-app/client/src/components/Form/Form.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Form.css';\r\nimport Button from '../Button/Button.js';\r\n\r\nfunction Form({ fields, onSubmit }) {\r\n    const [formData, setFormdata] = useState({});\r\n//dont think i need the backend request here, but i will leave it in for now\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/home').then(response => response.json()).then(data => setMessage(data.message));\r\n    }, []);\r\n    let content = null;\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit}>\r\n                {\r\n                fields.map((field) =>\r\n                    (\r\n                        <div key={field.name}>\r\n                            <label for={field.id}>\r\n                                {field.name}\r\n                                </label>\r\n                            {\r\n                                field.type === 'select'?\r\n                                (\r\n                                    content=<select >\r\n                                        {field.value.map((values) => (\r\n                                            <option key={value.name} value={values.value}>\r\n                                                {values.value}\r\n                                            </option>\r\n                                        ))}\r\n\r\n                                          </select>\r\n\r\n                                )//add any other field types here\r\n                                : \r\n                                (\r\n\r\n                                     content= \r\n                                     <input type={field.type}\r\n                                     id={field.name}\r\n                                     name={field.name}\r\n                                     value={formData[field.name] || ''}\r\n                                     onChange={(e) => setFormdata({ ...formData, [field.name]: e.target.value }) }\r\n                                     />\r\n                                )\r\n                               \r\n                                     \r\n                            }\r\n    \r\n                          {content}\r\n                        \r\n                        </div>\r\n\r\n                    ))\r\n\r\n\r\n                }\r\n                <div className=\"button-container\">\r\n                    <Button type=\"submit\" design=\"submit-button\" />\r\n                </div>\r\n\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}