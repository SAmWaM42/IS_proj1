{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\IS_PROJ1\\\\IS_proj1\\\\Thrift-app\\\\client\\\\src\\\\Components\\\\chatbox.js\",\n  _s = $RefreshSig$();\nimport './chatbox.css';\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Message({\n  data\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.timestamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_c = Message;\nfunction Chatbox({\n  messages\n}) {\n  _s();\n  const [input, setInput] = useState('');\n  const navigate = useNavigate();\n  const {\n    chatId\n  } = useParams(); // Assuming the URL contains a parameter for the chat ID or user ID\n  const {\n    isEmpty,\n    setIsEmpty\n  } = useState(false);\n  if (messages.length === 0) {\n    setIsEmpty(true);\n  }\n  const handleSend = async () => {\n    if (input.trim()) {\n      // Here you would typically send the message to the server\n      console.log('Sending message:', input);\n      const url = `http://localhost:5000/user/chats/${chatId}`;\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: input\n        })\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(Message, {\n        data: msg\n      }, msg._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }, this);\n}\n_s(Chatbox, \"KS4duuJqzAcmIP2de64AhmPFPNE=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c2 = Chatbox;\nexport default Chatbox;\nvar _c, _c2;\n$RefreshReg$(_c, \"Message\");\n$RefreshReg$(_c2, \"Chatbox\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","Message","data","className","children","text","fileName","_jsxFileName","lineNumber","columnNumber","timestamp","_c","Chatbox","messages","_s","input","setInput","navigate","chatId","isEmpty","setIsEmpty","length","handleSend","trim","console","log","url","response","fetch","method","headers","body","JSON","stringify","map","msg","_id","type","value","onChange","e","target","placeholder","onClick","_c2","$RefreshReg$"],"sources":["C:/xampp/htdocs/IS_PROJ1/IS_proj1/Thrift-app/client/src/Components/chatbox.js"],"sourcesContent":["\r\nimport './chatbox.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Message({ data }) {\r\n    return (\r\n        <div className=\"message\">\r\n            <p>{data.text}</p>\r\n            <p>{data.timestamp}</p>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Chatbox({ messages}) {\r\n    const [input, setInput] = useState('');\r\n    const navigate = useNavigate();\r\n    const { chatId } = useParams(); // Assuming the URL contains a parameter for the chat ID or user ID\r\n     const {isEmpty,setIsEmpty}=useState(false);\r\n     if(messages.length===0)\r\n     {\r\n        setIsEmpty(true);\r\n     }\r\n\r\n  \r\n    const handleSend = async () => {\r\n        if (input.trim()) {\r\n            // Here you would typically send the message to the server\r\n            console.log('Sending message:', input);\r\n            const url = `http://localhost:5000/user/chats/${chatId}`;\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ text: input }),\r\n\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n        return (\r\n            <div className=\"chatbox\">\r\n                {\r\n                <div className=\"messages\">\r\n                \r\n                { \r\n                    messages.map((msg) => (\r\n                        <Message key={msg._id} data={msg} />\r\n                    ))\r\n              \r\n                }\r\n                \r\n                \r\n\r\n                </div>\r\n}\r\n                <div className=\"input-area\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={input}\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        placeholder=\"Type a message...\"\r\n                    />\r\n                    <button onClick={handleSend}>Send</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\nexport default Chatbox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}