{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\IS_PROJ1\\\\IS_proj1\\\\Thrift-app\\\\client\\\\src\\\\Components\\\\Form.js\",\n  _s = $RefreshSig$();\nimport Button from \"./Button\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form({\n  formData,\n  button_data,\n  dest_url\n}) {\n  _s();\n  const [formValues, setFormValues] = useState(() => {\n    const initialValues = {};\n    formData.forEach(field => {\n      initialValues[field.name] = ''; // Initialize each field to empty string\n    });\n    return initialValues;\n  });\n  const url = `http://localhost:5000/user/${dest_url}`;\n  var method;\n  console.log(url);\n  if (dest_url === 'login' || dest_url === 'register') {\n    method = 'POST';\n  }\n  ;\n  const handleSubmit = async event => {\n    event.preventDefault(); // <-- THIS IS THE CRUCIAL LINE: Prevent default browser form submission!\n\n    console.log(\"Submitting data:\", formValues);\n    try {\n      const response = await fetch(url, {\n        method: method,\n        // Use the determined method\n        headers: {\n          'Content-Type': 'application/json' // Tell the server we're sending JSON\n        },\n        body: JSON.stringify(formValues) // Send your state data as JSON\n      });\n      const data = await response.json(); // Parse the server's JSON response\n\n      if (response.ok) {\n        console.log('Server response (success):', data);\n        alert(data.message || 'Operation successful!');\n        // You might want to redirect, show success message, clear form, etc.\n      } else {\n        console.error('Server response (error):', data);\n        alert(data.message || 'Operation failed.');\n      }\n    } catch (error) {\n      console.error('Network or client-side error:', error);\n      alert('A network error occurred. Please try again.');\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormValues(prevValues => ({\n      ...prevValues,\n      [name]: value\n    }));\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form-container\",\n      children: [formData.map(field => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: field.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: field.type,\n          name: field.name,\n          value: formValues[field.name],\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, field.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        className: button_data.className,\n        type: button_data.type,\n        label: button_data.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this);\n  };\n}\n_s(Form, \"sWInpGhjjPaouatp3WbVTFYaoyU=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["Button","React","useState","jsxDEV","_jsxDEV","Form","formData","button_data","dest_url","_s","formValues","setFormValues","initialValues","forEach","field","name","url","method","console","log","handleSubmit","event","preventDefault","response","fetch","headers","body","JSON","stringify","data","json","ok","alert","message","error","handleInputChange","e","value","target","prevValues","onSubmit","className","children","map","label","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","key","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/IS_PROJ1/IS_proj1/Thrift-app/client/src/Components/Form.js"],"sourcesContent":["import Button from \"./Button\";\r\nimport React, { useState } from 'react';\r\n\r\nfunction Form({formData,button_data,dest_url})\r\n{\r\n\r\n    const [formValues, setFormValues] = useState(() => {\r\n        const initialValues = {};\r\n        formData.forEach(field => {\r\n            initialValues[field.name] = ''; // Initialize each field to empty string\r\n        });\r\n        return initialValues;\r\n    });\r\n    const url=`http://localhost:5000/user/${dest_url}`;\r\n    var  method;\r\n    console.log(url);\r\n    if(dest_url=== 'login' || dest_url === 'register')\r\n    {\r\n        method = 'POST';\r\n    };\r\n \r\n     const handleSubmit = async (event) => {\r\n        event.preventDefault(); // <-- THIS IS THE CRUCIAL LINE: Prevent default browser form submission!\r\n\r\n        console.log(\"Submitting data:\", formValues);\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: method, // Use the determined method\r\n                headers: {\r\n                    'Content-Type': 'application/json', // Tell the server we're sending JSON\r\n                },\r\n                body: JSON.stringify(formValues), // Send your state data as JSON\r\n            });\r\n\r\n            const data = await response.json(); // Parse the server's JSON response\r\n\r\n            if (response.ok) {\r\n                console.log('Server response (success):', data);\r\n                alert(data.message || 'Operation successful!');\r\n                // You might want to redirect, show success message, clear form, etc.\r\n            } else {\r\n                console.error('Server response (error):', data);\r\n                alert(data.message || 'Operation failed.');\r\n            }\r\n        } catch (error) {\r\n            console.error('Network or client-side error:', error);\r\n            alert('A network error occurred. Please try again.');\r\n        }\r\n      \r\n\r\n    };\r\n      const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormValues(prevValues => ({\r\n        ...prevValues,\r\n        [name]: value,\r\n    }));\r\n   \r\n    return(\r\n        <form onSubmit={handleSubmit} className=\"form-container\">\r\n            {\r\n            formData.map((field) => (\r\n                <div key={field.key}>\r\n                    <label>{field.label}</label>\r\n                    <input type={field.type} name={field.name}  value={formValues[field.name]} onChange={handleInputChange}/>\r\n                </div>\r\n            ))}\r\n           <Button\r\n            className={button_data.className}\r\n             type={button_data.type} label={button_data.label} \r\n              />\r\n        </form> \r\n\r\n    )\r\n}\r\n}\r\n\r\nexport default Form;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}